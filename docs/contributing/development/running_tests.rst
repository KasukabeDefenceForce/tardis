.. _running-tests:

*************
Running tests
*************

There are two basic categories of tests in TARDIS: 1) the unit
tests, and 2) the integration tests. Unit tests check the outputs of individual functions,
while the integration tests check entire runs for different setups of TARDIS.

The unit tests run very quickly and thus are executed after every suggested change
to TARDIS. The integration tests are much more costly and thus are only executed
every few days on a dedicated server.

All of them are based on the excellent ``astropy-setup-helpers`` package and
`pytest <https://docs.pytest.org/en/latest/>`_.

Running the Unit Tests
======================

This is very straightforward to run on your own machine. For very simple unit
tests, you can run this with:

.. code-block:: shell

    > pytest tardis


Running the more advanced unit tests requires TARDIS Regression data that can be
downloaded
(`tardis-regression-data <https://github.com/tardis-sn/tardis-regression-data>`_).
`Git LFS <https://www.atlassian.com/git/tutorials/git-lfs>`_ is used
to download the large files in the tardis-regression-data repository.

However, it is not required to download the entire repository. Firstly it is
important to identify the regression-data files that are needed. Sometimes, it is possible
that a preused fixture that is also being used in the current tests is using some
regression-data. So, it is advised to check for such cases beforehand.

After identifying the refdata files to be used in the unit tests, those particular
files can be downloaded using ``git lfs`` 

.. code-block:: shell

    > git lfs pull --include=filename

It is important to maintain the same directory structure as the tardis-regression-data repo
i.e. the lfs files should be in the same directory tree exactly as in tardis-regression-data
repository.

Finally, the tests can be run using the following command

.. code-block:: shell

    > pytest tardis --tardis-regression-data=/path/to/tardis-regression-data/

Or, to run tests for a particular file or directory

.. code-block:: shell

    > pytest tardis/path/to/test_file_or_directory --tardis-regression-data=/path/to/tardis-regression-data/

.. warning::
    The `tests workflow <https://github.com/tardis-sn/tardis/blob/master/.github/workflows/tests.yml>`_ runs on 
    `pull requests <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request>`_ and on 
    `push <https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push>`_ events.
    To prevent leaking LFS quota, tests have been disabled on forks.
    If, by any chance, you need to run tests on your fork, make sure to run the tests workflow on master branch first.
    The LFS cache generated in the master branch should be available in all child branches. 
    You can check if cache was generated by looking in the ``Restore LFS Cache`` step of the workflow run. 
    Cache can also be found under the "Management" Section under "Actions" tab.